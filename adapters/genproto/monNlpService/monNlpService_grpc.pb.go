// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: monNlpService.proto

package monNlp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MonNlpServiceClient is the client API for MonNlpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MonNlpServiceClient interface {
	Tokenize(ctx context.Context, in *TokenizeRequest, opts ...grpc.CallOption) (*TokenizeResponse, error)
}

type monNlpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMonNlpServiceClient(cc grpc.ClientConnInterface) MonNlpServiceClient {
	return &monNlpServiceClient{cc}
}

func (c *monNlpServiceClient) Tokenize(ctx context.Context, in *TokenizeRequest, opts ...grpc.CallOption) (*TokenizeResponse, error) {
	out := new(TokenizeResponse)
	err := c.cc.Invoke(ctx, "/monNlp.MonNlpService/tokenize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonNlpServiceServer is the server API for MonNlpService service.
// All implementations should embed UnimplementedMonNlpServiceServer
// for forward compatibility
type MonNlpServiceServer interface {
	Tokenize(context.Context, *TokenizeRequest) (*TokenizeResponse, error)
}

// UnimplementedMonNlpServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMonNlpServiceServer struct {
}

func (UnimplementedMonNlpServiceServer) Tokenize(context.Context, *TokenizeRequest) (*TokenizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tokenize not implemented")
}

// UnsafeMonNlpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonNlpServiceServer will
// result in compilation errors.
type UnsafeMonNlpServiceServer interface {
	mustEmbedUnimplementedMonNlpServiceServer()
}

func RegisterMonNlpServiceServer(s grpc.ServiceRegistrar, srv MonNlpServiceServer) {
	s.RegisterService(&MonNlpService_ServiceDesc, srv)
}

func _MonNlpService_Tokenize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonNlpServiceServer).Tokenize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monNlp.MonNlpService/tokenize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonNlpServiceServer).Tokenize(ctx, req.(*TokenizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MonNlpService_ServiceDesc is the grpc.ServiceDesc for MonNlpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MonNlpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "monNlp.MonNlpService",
	HandlerType: (*MonNlpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "tokenize",
			Handler:    _MonNlpService_Tokenize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "monNlpService.proto",
}
